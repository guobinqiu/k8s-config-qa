apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-prometheus
  namespace: kube-ops
spec:
  replicas: 1
  selector:
    matchLabels:
      name: myapp-prometheus
  template:
    metadata:
      labels:
        name: myapp-prometheus
    spec:
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      - name: prometheus
        image: prom/prometheus
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--web.external-url=https://yourdomain/myapp/prometheus/"
          - "--storage.tsdb.retention.time=7d"
          - "--storage.tsdb.path=/data"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: data
          mountPath: /data
      volumes:
      - name: config
        configMap:
          name: myapp-prometheus-configmap
      - name: data
        persistentVolumeClaim:
          claimName: pvc-myapp-prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-prometheus
  namespace: kube-ops
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9090
    targetPort: 9090
  selector:
    name: myapp-prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-prometheus-configmap
  namespace: kube-ops
data:
  prometheus.yml: |-
    global:
      scrape_interval:     15s
      evaluation_interval: 15s

    rule_files:
      # - "first.rules"
      # - "second.rules"

    scrape_configs:
      - job_name: myapp
        scrape_interval: 10s
        static_configs:
        - targets:
          - myapp
        basic_auth:
          username: admin
          password: admin
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-myapp-prometheus
  namespace: kube-ops
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 50Gi
